TODO

- performance: currently the system is mostly yielding
- cell: there are 2 parts of storing 'cell' based data. One is the actual storage of the cell. The other is the
object that is used during an operation on that cell. It could contain flags like isDirty; something not needed
for the actual stored cell data. Currently the cell would serve these 2 purposes and that is no good because
it has inflated concerns and the object becomes bigger than strictly required because of the processing fiels.

    - change record..

    - a read operation doesn't need to receive a change record, it can receive the id and get the data directly

- deadlock: we need to make sure that if an operation on a segment is executed while already executing from
a different segment, they you are not going to deadlock (because the lock on the original segment is not released)

- optimization with reading immutable data, volatile read would be enough. more thinking needed.

- when an asynchronous call is done, instead of doing a notify, just drop the callback + result in some executor and
have it processed. This way there is no blocking going on.

RESEARCH:

    http://en.wikipedia.org/wiki/Open_addressing
    http://www.coverfire.com/articles/queueing-in-the-linux-network-stack/

DONE